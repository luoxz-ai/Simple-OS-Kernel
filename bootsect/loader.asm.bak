
BIO_SEG		EQU	70H		; Destingation segment of BIOS
DIR_ENTRY_SIZE	EQU	32		; Size of directory entry in bytes

CODE	SEGMENT
	ASSUME CS:CODE,DS:NOTHING,ES:NOTHING,SS:NOTHING

$START:
	jmp	Main

OsVersion	DB	"WANGZIQI"	; DOS version number
BytesPerSector	DW	0200h		; Size of a physical sector
SecsPerClust	DB	01		; Sectors per allocation unit
ReservedSecs	DW	0001		; Number of reserved sectors
NumFats		DB	02		; Number of fats
NumDirEntries	DW	00e0h		; Number of direc entries
TotalSectors	DW	0b40h		; Number of sectors - number of hidden
					; sectors (0 when 32 bit sector number)
MediaByte	DB	0F0H		; MediaByte byte
NumFatSecs	DW	0009h		; Number of fat sectors
SecPerTrack	DW	0012h		; Sectors per track
NumHeads	DW	0002h		; Number of drive heads

HiddenSecs	DD	00000000		; Number of hidden sectors
BigTotalSecs	DD	00000000		; 32 bit version of number of sectors
BootDrv		DB	00h
CurrentHead	DB	00h		; Current Head
ExtBootSig	DB	29h
SerialNum	DD	5a541826h
VolumeLabel	DB	'NO NAME    '
FatId		DB	'FAT12   '

uData	LABEL	BYTE
Sec9		EQU	BYTE PTR uData+0
BiosLow 	EQU	WORD PTR uData+11
BiosHigh	EQU	WORD PTR uData+13
CurTrk		EQU	WORD PTR uData+15
CurSec		EQU	BYTE PTR uData+17
DirLow		EQU	WORD PTR uData+18
DirHigh		EQU	WORD PTR uData+20

MAIN:
	cli	
	xor	AX, AX
	mov	SS, AX
	mov	SP, 7C00H
	push	SS
	pop	ES

	mov	BX, 1EH * 4
	lds	SI, DWORD PTR SS:[BX]
	push	DS
	push	SI
	push	SS
	push	BX
	mov	DI,OFFSET Sec9
	mov	CX,11
	cld

	repz	movsb
	push	ES
	pop	DS
	assume	DS:CODE

	mov	BYTE PTR [DI-2], 0fh
	mov	CX, [offset SecPerTrack]
	mov	BYTE PTR [DI-7], cl

	mov	[BX+2],AX
	mov	[BX],offset Sec9

	sti
	int	13h
	jc	CkErr

	xor	AX,AX
	cmp	TotalSectors,AX		; 32 bit calculation?
	je	Dir_Cont

	mov	CX,TotalSectors
	mov	WORD PTR BigTotalSecs,CX

Dir_Cont:
	mov	AL,NumFats
	mul	NumFatSecs
	add	AX,WORD PTR HiddenSecs
	adc	DX,WORD PTR HiddenSecs[2]
	add	AX,ReservedSecs
	adc	DX,0

	mov	[DirLow],AX
	mov	[DirHigh],DX
	mov	[BiosLow],AX
	mov	[BiosHigh],DX

	mov	AX,0020h
	mul	NumDirEntries
	mov	BX,BytesPerSector
	add	AX,BX
	dec	AX
	div	BX
	add	[BiosLow],AX
	adc	[BiosHigh],0

	mov	BX,0500H

	mov	DX,[DirHigh]
	mov	AX,[DirLow]
	call	DoDiv
	jc	CkErr

	mov	al, 1
	call	DoCall
	jc	CkErr

	mov	DI,BX
	mov	CX,11
	mov	SI,OFFSET Bio
	repz	cmpsb
	jz	DoLoad

CkErr:	mov	SI,OFFSET SysMsg

ErrOut:
	call	Write


	xor	AX,AX
	int	16h
	pop	SI
	pop	DS
	pop	[SI]
	pop	[SI+2]
	int	19h

Load_Failure:
	pop	ax
	pop	ax
	pop	ax
	jmp	short CkErr

DoLoad:
	mov	AX,[BX + 1AH]		; AX = BIOS starting cluster
	dec	AX			; Subtract first 2 reserved clusters
	dec	AX
	mov	BL,SecsPerClust		; BX = Sectors per cluster
	xor	BH,BH
	mul	BX			; DX:AX = first logical sector of bios

	add	AX,[BiosLow]		; Add absolute start sector
	adc	DX,[BiosHigh]		; DX:AX = Absolute bios sector offset

	mov	BX,700H
	mov	CX,3

Do_While:
	push	AX
	push	DX
	push	CX
	call	DoDiv			; DX:AX = sector number.
	jc	Load_Failure		; Adjust stack. Show error message
	mov	al, 1			; Read 1 sector at a time.
					; This is to handle a case of media
					; when the first sector of IBMLOAD is the
					; the last sector in a track.
	call	DoCall			; Read the sector.
	pop	CX
	pop	DX
	pop	AX
	jc	CkErr			; Read error?
	add	AX,1			; Next sector number.
	adc	DX,0
	add	BX,BytesPerSector	; Adjust buffer address.
	loop	Do_While


; =========================================================================
; Main read-in loop.
; ES:BX points to area to read.
; Count is the number of sectors remaining.
; BIOS$ is the next logical sector number to read
;
; CurrentHead is the head for this next disk request
; CurTrk is the track for this next request
; CurSec is the beginning sector number for this request
;
; AX is the number of sectors that we may read.
;
; =========================================================================
;
; IBMINIT requires the following input conditions:
;
;   DL = INT 13 drive number we booted from
;   CH = media byte
;   IBMBIO init routine should check if the boot record is the
;   extended one by looking at the extended_boot_signature.
;   If it is, then should us AX;BX for the starting data sector number.
; =========================================================================

DISKOK:
	mov	CH,MediaByte
	mov	DL,BootDrv
	mov	BX,[BiosLow]		; J.K.I1.Get bios sector in bx
	mov	AX,[BiosHigh]		; J.K.I1.
	push	word ptr 0070h
	push	word ptr 0000h
	retf

WRITE:
	lodsb				;GET NEXT CHARACTER
	or	AL,AL			;Clear the high bit
	jz	EndWr			;ERROR MESSAGE UP, JUMP TO BASIC
	mov	AH,14			;WILL WRITE CHARACTER & ATTRIBUTE
	mov	BX,7			;ATTRIBUTE
	int	10h			;PRINT THE CHARACTER
	jmp	Write

		; Convert a logical sector into Track/sector/head.
		; DX;AX has the sector number. Because of not enough space, we
		; are  going to use Simple 32 bit division here.
		; Carry set if DX;AX is too big to handle.

DODIV:
	cmp	DX,SecPerTrack		; To prevent overflow!!!
	jae	DivOverFlow		; Compare high word with the divisor.
	div	SecPerTrack		; AX = Total tracks, DX = sector number
	inc	DL			; We assume SecPerTrack < 255 & DH=0
					; curSec is 1-based.
	mov	CurSec, DL		; Save it
	xor	DX,DX
	div	NumHeads
	mov	CurrentHead,DL		;Also, NumHeads < 255.
	mov	CurTrk,AX
	clc
	ret

DivOverFlow:
	stc

EndWR:
	ret
; =========================================================================
;
; Issue one read request. ES:BX have the transfer address,
; AL is the number of sectors.
;
; =========================================================================

DOCALL:
	mov	AH,2
	mov	DX,CurTrk
	mov	CL,6
	shl	DH,CL
	or	DH,CurSec
	mov	CX,DX
	xchg	CH,CL
	mov	DL, BootDrv
	mov	DH, CurrentHead
	int	13h
	ret

SYSMSG	label	byte
Bio	DB	"LOADER  COM"

; =========================================================================

Free	EQU (512 - 4) - ($-$start)

if Free LT 0
    %out FATAL PROBLEM:boot sector is too large
	.ERR
endif

	org	7C00H + (512 - 2)
	db	55h,0aah			; Boot sector signature

; =========================================================================

CODE	ENDS
	END 
